{
    "project": {
        "name": "Clappr",
        "description": "An extensible media player for the web",
        "version": "0.2.41",
        "url": "https://github.com/clappr/clappr",
        "logo": "https://cloud.githubusercontent.com/assets/244265/6373134/a845eb50-bce7-11e4-80f2-592ba29972ab.png"
    },
    "files": {
        "src/base/base_object.js": {
            "name": "src/base/base_object.js",
            "modules": {
                "base": 1
            },
            "classes": {
                "BaseObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/container_plugin.js": {
            "name": "src/base/container_plugin.js",
            "modules": {},
            "classes": {
                "ContainerPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/events.js": {
            "name": "src/base/events.js",
            "modules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/playback.js": {
            "name": "src/base/playback.js",
            "modules": {},
            "classes": {
                "Playback": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/ui_container_plugin.js": {
            "name": "src/base/ui_container_plugin.js",
            "modules": {},
            "classes": {
                "UIContainerPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/ui_object.js": {
            "name": "src/base/ui_object.js",
            "modules": {},
            "classes": {
                "UIObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/components/container/container.js": {
            "name": "src/components/container/container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/components/container_factory/container_factory.js": {
            "name": "src/components/container_factory/container_factory.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/core/core.js": {
            "name": "src/components/core/core.js",
            "modules": {
                "components": 1
            },
            "classes": {
                "Core": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/components/core_factory/core_factory.js": {
            "name": "src/components/core_factory/core_factory.js",
            "modules": {},
            "classes": {
                "CoreFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/components/loader/loader.js": {
            "name": "src/components/loader/loader.js",
            "modules": {},
            "classes": {
                "Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/components/media_control/media_control.js": {
            "name": "src/components/media_control/media_control.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mediator.js": {
            "name": "src/components/mediator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/player.js": {
            "name": "src/components/player.js",
            "modules": {},
            "classes": {
                "Player": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/playbacks/flash/flash.js": {
            "name": "src/playbacks/flash/flash.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/playbacks/flashls/flashls.js": {
            "name": "src/playbacks/flashls/flashls.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/playbacks/html5_video/html5_video.js": {
            "name": "src/playbacks/html5_video/html5_video.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/plugins/strings.js": {
            "name": "src/plugins/strings.js",
            "modules": {
                "plugins": 1
            },
            "classes": {
                "Strings": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "base": {
            "name": "base",
            "submodules": {},
            "elements": {},
            "classes": {
                "BaseObject": 1,
                "ContainerPlugin": 1,
                "Events": 1,
                "Playback": 1,
                "UIContainerPlugin": 1,
                "UIObject": 1,
                "Container": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/components/container/container.js",
            "line": 15
        },
        "components": {
            "name": "components",
            "submodules": {},
            "elements": {},
            "classes": {
                "Core": 1,
                "CoreFactory": 1,
                "Loader": 1,
                "Player": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/components/player.js",
            "line": 17,
            "description": "The Core is responsible to manage Containers, the mediator, MediaControl\nand the player state."
        },
        "plugins": {
            "name": "plugins",
            "submodules": {},
            "elements": {},
            "classes": {
                "Strings": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/plugins/strings.js",
            "line": 5,
            "description": "The internationalization (i18n) plugin"
        }
    },
    "classes": {
        "BaseObject": {
            "name": "BaseObject",
            "shortname": "BaseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "file": "src/base/base_object.js",
            "line": 8,
            "is_constructor": 1,
            "extends": "Events"
        },
        "ContainerPlugin": {
            "name": "ContainerPlugin",
            "shortname": "ContainerPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/base/container_plugin.js",
            "line": 4,
            "description": "The base class for a container plugin",
            "is_constructor": 1,
            "extends": "UIObject"
        },
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/base/events.js",
            "line": 56,
            "is_constructor": 1
        },
        "Playback": {
            "name": "Playback",
            "shortname": "Playback",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/base/playback.js",
            "line": 4,
            "description": "An abstraction to represent a generic playback, it's like an interface to be implemented by subclasses.",
            "is_constructor": 1,
            "extends": "UIObject"
        },
        "UIContainerPlugin": {
            "name": "UIContainerPlugin",
            "shortname": "UIContainerPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/base/ui_container_plugin.js",
            "line": 9,
            "description": "The base class for an ui container plugin",
            "is_constructor": 1,
            "extends": "UIObject"
        },
        "UIObject": {
            "name": "UIObject",
            "shortname": "UIObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/base/ui_object.js",
            "line": 12,
            "description": "A base class to create ui object.",
            "is_constructor": 1,
            "extends": "BaseObject"
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "base",
            "namespace": "",
            "file": "src/components/container/container.js",
            "line": 15,
            "description": "An abstraction to represent a container for a given playback\nTODO: describe its responsabilities",
            "is_constructor": 1,
            "extends": "UIObject"
        },
        "Core": {
            "name": "Core",
            "shortname": "Core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "components",
            "namespace": "",
            "file": "src/components/core/core.js",
            "line": 20,
            "description": "The Core is responsible to manage Containers, the mediator, MediaControl\nand the player state.",
            "is_constructor": 1,
            "extends": "UIObject"
        },
        "CoreFactory": {
            "name": "CoreFactory",
            "shortname": "CoreFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "components",
            "namespace": "",
            "file": "src/components/core_factory/core_factory.js",
            "line": 8,
            "description": "The Core Factory is responsible for instantiate the core and it's plugins.",
            "is_constructor": 1,
            "extends": "BaseObject"
        },
        "Loader": {
            "name": "Loader",
            "shortname": "Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "components",
            "namespace": "",
            "file": "src/components/loader/loader.js",
            "line": 33,
            "description": "It keeps a list of the default plugins (playback, container, core) and it merges external plugins with its internals.",
            "is_constructor": 1,
            "extends": "BaseObject"
        },
        "Player": {
            "name": "Player",
            "shortname": "Player",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "components",
            "namespace": "",
            "file": "src/components/player.js",
            "line": 17,
            "is_constructor": 1,
            "extends": "BaseObject",
            "example": [
                "\n### Using the Player\n\nAdd the following script on your HTML:\n```html\n<head>\n  <script type=\"text/javascript\" src=\"http://cdn.clappr.io/latest/clappr.min.js\"></script>\n</head>\n```\nNow, create the player:\n```html\n<body>\n  <div id=\"player\"></div>\n  <script>\n    var player = new Clappr.Player({source: \"http://your.video/here.mp4\", parentId: \"#player\"});\n  </script>\n</body>\n```"
            ]
        },
        "Strings": {
            "name": "Strings",
            "shortname": "Strings",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "plugins",
            "namespace": "",
            "file": "src/plugins/strings.js",
            "line": 5,
            "description": "The internationalization (i18n) plugin",
            "is_constructor": 1,
            "extends": "CorePlugin"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/base/base_object.js",
            "line": 15,
            "description": "returns the object options",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "class": "BaseObject",
            "module": "base"
        },
        {
            "file": "src/base/base_object.js",
            "line": 22,
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "BaseObject",
            "module": "base"
        },
        {
            "file": "src/base/base_object.js",
            "line": 31,
            "description": "a unique id prefixed with `'o'`, `o1, o232`",
            "itemtype": "property",
            "name": "uniqueId",
            "type": "String",
            "class": "BaseObject",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 62,
            "description": "listen to an event indefinitely, if you want to stop you need to call `off`",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 77,
            "description": "listen to an event only once",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 94,
            "description": "stop listening to an event",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 130,
            "description": "triggers an event given its `name`",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 148,
            "description": "stop listening an event for a given object",
            "itemtype": "method",
            "name": "stopListening",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 171,
            "description": "listen to an event indefinitely for a given `obj`",
            "itemtype": "method",
            "name": "listenTo",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```javascript\nthis.listenTo(this.core.playback, Events.PLAYBACK_PAUSE, this.callback)\n```"
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 183,
            "description": "listen to an event once for a given `obj`",
            "itemtype": "method",
            "name": "listenToOnce",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n```javascript\nthis.listenToOnce(this.core.playback, Events.PLAYBACK_PAUSE, this.callback)\n```"
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 209,
            "description": "Fired when the player is ready on startup",
            "itemtype": "event",
            "name": "PLAYER_READY",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 215,
            "description": "Fired when player resizes",
            "itemtype": "event",
            "name": "PLAYER_RESIZE",
            "params": [
                {
                    "name": "currentSize",
                    "description": "an object with the current size",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 222,
            "description": "Fired when player changes its fullscreen state",
            "itemtype": "event",
            "name": "PLAYER_FULLSCREEN",
            "params": [
                {
                    "name": "whether",
                    "description": "or not the player is on fullscreen mode",
                    "type": "Boolean"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 229,
            "description": "Fired when player starts to play",
            "itemtype": "event",
            "name": "PLAYER_PLAY",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 235,
            "description": "Fired when player pauses",
            "itemtype": "event",
            "name": "PLAYER_PAUSE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 241,
            "description": "Fired when player stops",
            "itemtype": "event",
            "name": "PLAYER_STOP",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 247,
            "description": "Fired when player ends the video",
            "itemtype": "event",
            "name": "PLAYER_ENDED",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 253,
            "description": "Fired when player seeks the video",
            "itemtype": "event",
            "name": "PLAYER_SEEK",
            "params": [
                {
                    "name": "time",
                    "description": "the current time in seconds",
                    "type": "Number"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 260,
            "description": "Fired when player receives an error",
            "itemtype": "event",
            "name": "PLAYER_ERROR",
            "params": [
                {
                    "name": "error",
                    "description": "the error",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 267,
            "description": "Fired when the time is updated on player",
            "itemtype": "event",
            "name": "PLAYER_TIMEUPDATE",
            "params": [
                {
                    "name": "progress",
                    "description": "Data\nprogress object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "current",
                            "description": "\ncurrent time",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "total",
                            "description": "\ntotal time",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 279,
            "description": "Fired when player updates its volume",
            "itemtype": "event",
            "name": "PLAYER_VOLUMEUPDATE",
            "params": [
                {
                    "name": "volume",
                    "description": "the current volume",
                    "type": "Number"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 291,
            "description": "Fired when the playback is downloading the media",
            "itemtype": "event",
            "name": "PLAYBACK_PROGRESS",
            "params": [
                {
                    "name": "progress",
                    "description": "\nData progress object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "start",
                            "description": "\nstart position of buffered content at current position",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "current",
                            "description": "\nend position of buffered content at current position",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "total",
                            "description": "\ntotal content to be downloaded",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "buffered",
                    "description": "\narray of buffered segments ({start, end}). [Only for supported playbacks]",
                    "type": "Array"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 307,
            "description": "Fired when the time is updated on playback",
            "itemtype": "event",
            "name": "PLAYBACK_TIMEUPDATE",
            "params": [
                {
                    "name": "progress",
                    "description": "Data\nprogress object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "current",
                            "description": "\ncurrent time",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "total",
                            "description": "\ntotal time",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 319,
            "description": "Fired when playback is ready",
            "itemtype": "event",
            "name": "PLAYBACK_READY",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 325,
            "description": "Fired when the playback starts having to buffer because\nplayback can currently not be smooth.\n\nThis corresponds to the playback `buffering` property being\n`true`.",
            "itemtype": "event",
            "name": "PLAYBACK_BUFFERING",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 335,
            "description": "Fired when the playback has enough in the buffer to be\nable to play smoothly, after previously being unable to\ndo this.\n\nThis corresponds to the playback `buffering` property being\n`false`.",
            "itemtype": "event",
            "name": "PLAYBACK_BUFFERFULL",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 346,
            "description": "Fired when playback changes any settings (volume, seek and etc)",
            "itemtype": "event",
            "name": "PLAYBACK_SETTINGSUPDATE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 352,
            "description": "Fired when playback loaded its metadata",
            "itemtype": "event",
            "name": "PLAYBACK_LOADEDMETADATA",
            "params": [
                {
                    "name": "metadata",
                    "description": "Data\nsettings object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "duration",
                            "description": "\nthe playback duration",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "\nextra meta data",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 364,
            "description": "Fired when playback updates its video quality",
            "itemtype": "event",
            "name": "PLAYBACK_HIGHDEFINITIONUPDATE",
            "params": [
                {
                    "name": "isHD\ntrue",
                    "description": "when is on HD, false otherwise",
                    "type": "Boolean"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 372,
            "description": "Fired when playback updates its bitrate",
            "itemtype": "event",
            "name": "PLAYBACK_BITRATE",
            "params": [
                {
                    "name": "bitrate",
                    "description": "Data\nbitrate object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bandwidth",
                            "description": "\nbitrate bandwidth when it's available",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "width",
                            "description": "\nplayback width (ex: 720, 640, 1080)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height",
                            "description": "\nplayback height (ex: 240, 480, 720)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "level",
                            "description": "\nplayback level when it's available, it could be just a map for width (0 => 240, 1 => 480, 2 => 720)",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 388,
            "description": "Fired when the playback has its levels",
            "itemtype": "event",
            "name": "PLAYBACK_LEVELS_AVAILABLE",
            "params": [
                {
                    "name": "levels\nthe",
                    "description": "ordered levels, each one with the following format `{id: 1, label: '500kbps'}` ps: id should be a number >= 0",
                    "type": "Array"
                },
                {
                    "name": "initial\nthe",
                    "description": "initial level otherwise -1 (AUTO)",
                    "type": "Number"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 398,
            "description": "Fired when the playback starts to switch level",
            "itemtype": "event",
            "name": "PLAYBACK_LEVEL_SWITCH_START",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 405,
            "description": "Fired when the playback ends the level switch",
            "itemtype": "event",
            "name": "PLAYBACK_LEVEL_SWITCH_END",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 413,
            "description": "Fired when playback internal state changes",
            "itemtype": "event",
            "name": "PLAYBACK_PLAYBACKSTATE",
            "params": [
                {
                    "name": "state",
                    "description": "Data\nstate object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "\nthe playback type",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 423,
            "description": "Fired when DVR becomes enabled/disabled.",
            "itemtype": "event",
            "name": "PLAYBACK_DVR",
            "params": [
                {
                    "name": "state",
                    "description": "true if dvr enabled",
                    "type": "Boolean"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 434,
            "description": "Fired when the media for a playback ends.",
            "itemtype": "event",
            "name": "PLAYBACK_ENDED",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the playback",
                    "type": "String"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 441,
            "description": "Fired when user requests `play()`",
            "itemtype": "event",
            "name": "PLAYBACK_PLAY_INTENT",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 447,
            "description": "Fired when the media for a playback starts playing.\nThis is not necessarily when the user requests `play()`\nThe media may have to buffer first.\nI.e. `isPlaying()` might return `true` before this event is fired,\nbecause `isPlaying()` represents the intended state.",
            "itemtype": "event",
            "name": "PLAYBACK_PLAY",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 457,
            "description": "Fired when the media for a playback pauses.",
            "itemtype": "event",
            "name": "PLAYBACK_PAUSE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 463,
            "description": "Fired when the media for a playback is stopped.",
            "itemtype": "event",
            "name": "PLAYBACK_STOP",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 469,
            "description": "Fired if an error occurs in the playback.",
            "itemtype": "event",
            "name": "PLAYBACK_ERROR",
            "params": [
                {
                    "name": "error",
                    "description": "An object containing the error details",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "Playback name",
                    "type": "String"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 488,
            "description": "Fired when the containers are created",
            "itemtype": "event",
            "name": "CORE_CONTAINERS_CREATED",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 494,
            "description": "Fired when the options were changed for the core",
            "itemtype": "event",
            "name": "CORE_OPTIONS_CHANGE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 500,
            "description": "Fired after creating containers, when the core is ready",
            "itemtype": "event",
            "name": "CORE_READY",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 506,
            "description": "Fired when the fullscreen state change",
            "itemtype": "event",
            "name": "CORE_FULLSCREEN",
            "params": [
                {
                    "name": "whether",
                    "description": "or not the player is on fullscreen mode",
                    "type": "Boolean"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 513,
            "description": "Fired when the screen orientation has changed.\nThis event is trigger only for mobile devices.",
            "itemtype": "event",
            "name": "CORE_SCREEN_ORIENTATION_CHANGED",
            "params": [
                {
                    "name": "screen",
                    "description": "An object with screen orientation\nscreen object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "event",
                            "description": "\nwindow resize event object",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "orientation",
                            "description": "\nscreen orientation (ie: 'landscape' or 'portrait')",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 529,
            "description": "Fired when the container internal state changes",
            "itemtype": "event",
            "name": "CONTAINER_PLAYBACKSTATE",
            "params": [
                {
                    "name": "state",
                    "description": "Data\nstate object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "\nthe playback type",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 540,
            "description": "Fired when the container updates its bitrate",
            "itemtype": "event",
            "name": "CONTAINER_BITRATE",
            "params": [
                {
                    "name": "bitrate",
                    "description": "Data\nbitrate object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bandwidth",
                            "description": "\nbitrate bandwidth when it's available",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "width",
                            "description": "\nplayback width (ex: 720, 640, 1080)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height",
                            "description": "\nplayback height (ex: 240, 480, 720)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "level",
                            "description": "\nplayback level when it's available, it could be just a map for width (0 => 240, 1 => 480, 2 => 720)",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 558,
            "description": "Fired when the container is ready",
            "itemtype": "event",
            "name": "CONTAINER_READY",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 565,
            "description": "Fired when the container loaded its metadata",
            "itemtype": "event",
            "name": "CONTAINER_LOADEDMETADATA",
            "params": [
                {
                    "name": "metadata",
                    "description": "Data\nsettings object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "duration",
                            "description": "\nthe playback duration",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "\nextra meta data",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 578,
            "description": "Fired when a text track is loaded and available on container for display",
            "itemtype": "event",
            "name": "CONTAINER_LOADEDTEXTTRACK",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 585,
            "description": "Fired when the time is updated on container",
            "itemtype": "event",
            "name": "CONTAINER_TIMEUPDATE",
            "params": [
                {
                    "name": "progress",
                    "description": "Data\nprogress object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "current",
                            "description": "\ncurrent time",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "total",
                            "description": "\ntotal time",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 597,
            "description": "Fired when the container is downloading the media",
            "itemtype": "event",
            "name": "CONTAINER_PROGRESS",
            "params": [
                {
                    "name": "progress",
                    "description": "Data\nprogress object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "start",
                            "description": "\ninitial downloaded content",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "current",
                            "description": "\ncurrent dowloaded content",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "total",
                            "description": "\ntotal content to be downloaded",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 620,
            "description": "Fired when the container seeks the video",
            "itemtype": "event",
            "name": "CONTAINER_SEEK",
            "params": [
                {
                    "name": "time",
                    "description": "the current time in seconds",
                    "type": "Number"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 629,
            "description": "Fired when container is buffering",
            "itemtype": "event",
            "name": "CONTAINER_STATE_BUFFERING",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 635,
            "description": "Fired when the container filled the buffer",
            "itemtype": "event",
            "name": "CONTAINER_STATE_BUFFERFULL",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 641,
            "description": "Fired when the container changes any settings (volume, seek and etc)",
            "itemtype": "event",
            "name": "CONTAINER_SETTINGSUPDATE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 647,
            "description": "Fired when container updates its video quality",
            "itemtype": "event",
            "name": "CONTAINER_HIGHDEFINITIONUPDATE",
            "params": [
                {
                    "name": "isHD\ntrue",
                    "description": "when is on HD, false otherwise",
                    "type": "Boolean"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 656,
            "description": "Fired when the media control shows",
            "itemtype": "event",
            "name": "CONTAINER_MEDIACONTROL_SHOW",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 662,
            "description": "Fired when the media control hides",
            "itemtype": "event",
            "name": "CONTAINER_MEDIACONTROL_HIDE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 672,
            "description": "Fired when the options were changed for the container",
            "itemtype": "event",
            "name": "CONTAINER_OPTIONS_CHANGE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 681,
            "description": "Fired when the player enters/exit on fullscreen",
            "itemtype": "event",
            "name": "MEDIACONTROL_FULLSCREEN",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 687,
            "description": "Fired when the media control shows",
            "itemtype": "event",
            "name": "MEDIACONTROL_SHOW",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 693,
            "description": "Fired when the media control hides",
            "itemtype": "event",
            "name": "MEDIACONTROL_HIDE",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 699,
            "description": "Fired when mouse enters on the seekbar",
            "itemtype": "event",
            "name": "MEDIACONTROL_MOUSEMOVE_SEEKBAR",
            "params": [
                {
                    "name": "event\nthe",
                    "description": "javascript event",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 707,
            "description": "Fired when mouse leaves the seekbar",
            "itemtype": "event",
            "name": "MEDIACONTROL_MOUSELEAVE_SEEKBAR",
            "params": [
                {
                    "name": "event\nthe",
                    "description": "javascript event",
                    "type": "Object"
                }
            ],
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 715,
            "description": "Fired when the media is being played",
            "itemtype": "event",
            "name": "MEDIACONTROL_PLAYING",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 721,
            "description": "Fired when the media is not being played",
            "itemtype": "event",
            "name": "MEDIACONTROL_NOTPLAYING",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/events.js",
            "line": 727,
            "description": "Fired when the container was changed",
            "itemtype": "event",
            "name": "MEDIACONTROL_CONTAINERCHANGED",
            "class": "Events",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 12,
            "description": "Determine if the playback does not contain video/has video but video should be ignored.",
            "itemtype": "property",
            "name": "isAudioOnly",
            "type": "Boolean",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 21,
            "description": "Determine if the playback has ended.",
            "itemtype": "property",
            "name": "ended",
            "type": "Boolean",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 30,
            "description": "The internationalization plugin.",
            "itemtype": "property",
            "name": "i18n",
            "type": "{Strings}",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 39,
            "description": "Determine if the playback is having to buffer in order for\nplayback to be smooth.\n(i.e if a live stream is playing smoothly, this will be false)",
            "itemtype": "property",
            "name": "buffering",
            "type": "Boolean",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 50,
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "the options object",
                    "type": "Object"
                },
                {
                    "name": "i18n",
                    "description": "the internationalization component",
                    "type": "Strings"
                }
            ],
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 61,
            "description": "Gives user consent to playback (mobile devices).",
            "itemtype": "method",
            "name": "consent",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 67,
            "description": "plays the playback.",
            "itemtype": "method",
            "name": "play",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 73,
            "description": "pauses the playback.",
            "itemtype": "method",
            "name": "pause",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 79,
            "description": "stops the playback.",
            "itemtype": "method",
            "name": "stop",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 85,
            "description": "seeks the playback to a given `time` in seconds",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "time",
                    "description": "should be a number between 0 and the video duration",
                    "type": "Number"
                }
            ],
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 92,
            "description": "seeks the playback to a given `percentage` in percentage",
            "itemtype": "method",
            "name": "seekPercentage",
            "params": [
                {
                    "name": "time",
                    "description": "should be a number between 0 and 100",
                    "type": "Number"
                }
            ],
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 100,
            "description": "The time that \"0\" now represents relative to when playback started.\nFor a stream with a sliding window this will increase as content is\nremoved from the beginning.",
            "itemtype": "method",
            "name": "getStartTimeOffset",
            "return": {
                "description": "time (in seconds) that time \"0\" represents.",
                "type": "Number"
            },
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 109,
            "description": "gets the duration in seconds",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "duration (in seconds) of the current source",
                "type": "Number"
            },
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 116,
            "description": "checks if the playback is playing.",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "`true` if the current playback is playing, otherwise `false`",
                "type": "Boolean"
            },
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 125,
            "description": "checks if the playback is ready.",
            "itemtype": "property",
            "name": "isReady",
            "type": "{Boolean} `true` if the current playback is ready, otherwise `false`",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 134,
            "description": "gets the playback type (`'vod', 'live', 'aod'`)",
            "itemtype": "method",
            "name": "getPlaybackType",
            "return": {
                "description": "you should write the playback type otherwise it'll assume `'no_op'`",
                "type": "String"
            },
            "example": [
                "\n```javascript\nhtml5VideoPlayback.getPlaybackType() //vod\nhtml5AudioPlayback.getPlaybackType() //aod\nhtml5VideoPlayback.getPlaybackType() //live\nflashHlsPlayback.getPlaybackType() //live\n```"
            ],
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 150,
            "description": "checks if the playback is in HD.",
            "itemtype": "method",
            "name": "isHighDefinitionInUse",
            "return": {
                "description": "`true` if the playback is playing in HD, otherwise `false`",
                "type": "Boolean"
            },
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 159,
            "description": "sets the volume for the playback",
            "itemtype": "method",
            "name": "volume",
            "params": [
                {
                    "name": "value",
                    "description": "a number between 0 (`muted`) to 100 (`max`)",
                    "type": "Number"
                }
            ],
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 166,
            "description": "destroys the playback, removing it from DOM",
            "itemtype": "method",
            "name": "destroy",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 179,
            "description": "checks if the playback can play a given `source`\nIf a mimeType is provided then this will be used instead of inferring the mimetype\nfrom the source extension.",
            "itemtype": "method",
            "name": "canPlay",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "the given source ex: `http://example.com/play.mp4`",
                    "type": "String"
                },
                {
                    "name": "mimeType",
                    "description": "the given mime type, ex: `'application/vnd.apple.mpegurl'`",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the playback is playable, otherwise `false`",
                "type": "Boolean"
            },
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 193,
            "description": "a playback type for video on demand",
            "itemtype": "property",
            "name": "VOD",
            "static": 1,
            "type": "String",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 201,
            "description": "a playback type for audio on demand",
            "itemtype": "property",
            "name": "AOD",
            "static": 1,
            "type": "String",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 209,
            "description": "a playback type for live video",
            "itemtype": "property",
            "name": "LIVE",
            "static": 1,
            "type": "String",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 217,
            "description": "a default playback type",
            "itemtype": "property",
            "name": "NO_OP",
            "static": 1,
            "type": "String",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/playback.js",
            "line": 225,
            "description": "the plugin type",
            "itemtype": "property",
            "name": "type",
            "static": 1,
            "type": "String",
            "class": "Playback",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 20,
            "description": "a unique id prefixed with `'c'`, `c1, c232`",
            "itemtype": "property",
            "name": "cid",
            "type": "String",
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 26,
            "description": "the dom element itself",
            "itemtype": "property",
            "name": "el",
            "type": "HTMLElement",
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 32,
            "description": "the dom element wrapped by `$`",
            "itemtype": "property",
            "name": "$el",
            "type": "HTMLElement",
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 39,
            "description": "gets the tag name for the ui component",
            "itemtype": "method",
            "name": "tagName",
            "default": "div",
            "return": {
                "description": "tag's name",
                "type": "String"
            },
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 46,
            "description": "a literal object mapping element's events to methods",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "example": [
                "\n\n```javascript\n\nclass MyButton extends UIObject {\n  constructor(options) {\n    super(options)\n    this.myId = 0\n  }\n  get events() { return { 'click': 'myClick' } }\n  myClick(){ this.myId = 42 }\n}\n\n// when you click on MyButton the method `myClick` will be called\n```"
            ],
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 67,
            "description": "a literal object mapping attributes and values to the element\nelement's attribute name and the value the attribute value",
            "itemtype": "property",
            "name": "attributes",
            "type": "Object",
            "example": [
                "\n\n```javascript\n\nclass MyButton extends UIObject {\n   constructor(options) { super(options) }\n   get attributes() { return { class: 'my-button'} }\n}\n\n// MyButton.el.className will be 'my-button'\n```"
            ],
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 86,
            "description": "it builds an ui component by:\n * creating an id for the component `cid`\n * making sure the element is created `$el`\n * delegating all `events` to the element",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "the options object",
                    "type": "Object"
                }
            ],
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 101,
            "description": "selects within the component.",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "a selector to find within the component.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an element, if it exists.",
                "type": "HTMLElement"
            },
            "example": [
                "\n```javascript\nfullScreenBarUIComponent.$('.button-full') //will return only `.button-full` within the component\n```"
            ],
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 115,
            "description": "render the component, usually attach it to a real existent `element`",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "itself",
                "type": "UIObject"
            },
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 124,
            "description": "removes the ui component from DOM",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "itself",
                "type": "UIObject"
            },
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 136,
            "description": "set element to `el` and `$el`",
            "itemtype": "method",
            "name": "setElement",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "delegate",
                    "description": "whether is delegate or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "itself",
                "type": "UIObject"
            },
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 151,
            "description": "delegates all the original `events` on `element` to its callbacks",
            "itemtype": "method",
            "name": "delegateEvents",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "itself",
                "type": "UIObject"
            },
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 178,
            "description": "undelegats all the `events`",
            "itemtype": "method",
            "name": "undelegateEvents",
            "return": {
                "description": "itself",
                "type": "UIObject"
            },
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/base/ui_object.js",
            "line": 188,
            "description": "ensures the creation of this ui component",
            "itemtype": "method",
            "name": "_ensureElement",
            "access": "private",
            "tagname": "",
            "class": "UIObject",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 5,
            "description": "Container is responsible for the video rendering and state",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 24,
            "description": "container's name",
            "itemtype": "method",
            "name": "name",
            "default": "Container",
            "return": {
                "description": "container's name",
                "type": "String"
            },
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 43,
            "description": "Determine if the playback has ended.",
            "itemtype": "property",
            "name": "ended",
            "type": "Boolean",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 52,
            "description": "Determine if the playback is having to buffer in order for\nplayback to be smooth.\n(i.e if a live stream is playing smoothly, this will be false)",
            "itemtype": "property",
            "name": "buffering",
            "type": "Boolean",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 63,
            "description": "The internationalization plugin.",
            "itemtype": "property",
            "name": "i18n",
            "type": "{Strings}",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 72,
            "description": "it builds a container",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "the options object",
                    "type": "Object"
                },
                {
                    "name": "i18n",
                    "description": "the internationalization component",
                    "type": "Strings"
                }
            ],
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 91,
            "description": "binds playback events to the methods of the container.\nit listens to playback's events and triggers them as container events.\n\n| Playback |\n|----------|\n| progress |\n| timeupdate |\n| ready |\n| buffering |\n| bufferfull |\n| settingsupdate |\n| loadedmetadata |\n| highdefinitionupdate |\n| bitrate |\n| playbackstate |\n| dvr |\n| mediacontrol_disable |\n| mediacontrol_enable |\n| ended |\n| play |\n| pause |\n| error |\n\nps: the events usually translate from PLABACK_x to CONTAINER_x, you can check all the events at `Event` class.",
            "itemtype": "method",
            "name": "bindEvents",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 167,
            "description": "returns `true` if DVR is enable otherwise `false`.",
            "itemtype": "method",
            "name": "isDvrEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 176,
            "description": "returns `true` if DVR is in use otherwise `false`.",
            "itemtype": "method",
            "name": "isDvrInUse",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 185,
            "description": "destroys the container",
            "itemtype": "method",
            "name": "destroy",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 253,
            "description": "plays the playback",
            "itemtype": "method",
            "name": "play",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 261,
            "description": "stops the playback",
            "itemtype": "method",
            "name": "stop",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 270,
            "description": "pauses the playback",
            "itemtype": "method",
            "name": "pause",
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 336,
            "description": "adds plugin to the container",
            "itemtype": "method",
            "name": "addPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 345,
            "description": "checks if a plugin, given its name, exist",
            "itemtype": "method",
            "name": "hasPlugin",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 355,
            "description": "get the plugin given its name",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container/container.js",
            "line": 411,
            "description": "enables to configure the container after its creation",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "options",
                    "description": "all the options to change in form of a javascript object",
                    "type": "Object"
                }
            ],
            "class": "Container",
            "module": "base"
        },
        {
            "file": "src/components/container_factory/container_factory.js",
            "line": 5,
            "description": "The ContainerFactory is responsible for manage playback bootstrap and create containers.",
            "class": "Core",
            "module": "base"
        },
        {
            "file": "src/components/core/core.js",
            "line": 44,
            "description": "checks if the core is ready.",
            "itemtype": "property",
            "name": "isReady",
            "type": "{Boolean} `true` if the core is ready, otherwise `false`",
            "class": "Core",
            "module": "components"
        },
        {
            "file": "src/components/core/core.js",
            "line": 53,
            "description": "The internationalization plugin.",
            "itemtype": "property",
            "name": "i18n",
            "type": "{Strings}",
            "class": "Core",
            "module": "components"
        },
        {
            "file": "src/components/core/core.js",
            "line": 331,
            "description": "enables to configure the container after its creation",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "options",
                    "description": "all the options to change in form of a javascript object",
                    "type": "Object"
                }
            ],
            "class": "Core",
            "module": "components"
        },
        {
            "file": "src/components/core_factory/core_factory.js",
            "line": 19,
            "description": "it builds the core factory",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "player",
                    "description": "the player object",
                    "type": "Player"
                }
            ],
            "class": "CoreFactory",
            "module": "components"
        },
        {
            "file": "src/components/core_factory/core_factory.js",
            "line": 30,
            "description": "creates a core and its plugins",
            "itemtype": "method",
            "name": "create",
            "return": {
                "description": "created core",
                "type": "Core"
            },
            "class": "CoreFactory",
            "module": "components"
        },
        {
            "file": "src/components/core_factory/core_factory.js",
            "line": 43,
            "description": "given the core plugins (`loader.corePlugins`) it builds each one",
            "itemtype": "method",
            "name": "addCorePlugins",
            "return": {
                "description": "the core with all plugins",
                "type": "Core"
            },
            "class": "CoreFactory",
            "module": "components"
        },
        {
            "file": "src/components/loader/loader.js",
            "line": 41,
            "description": "builds the loader",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "externalPlugins",
                    "description": "the external plugins",
                    "type": "Object"
                },
                {
                    "name": "playerId",
                    "description": "you can embed multiple instances of clappr, therefore this is the unique id of each one.",
                    "type": "Number"
                }
            ],
            "class": "Loader",
            "module": "components"
        },
        {
            "file": "src/components/loader/loader.js",
            "line": 61,
            "description": "groups by type the external plugins that were passed through `options.plugins` it they're on a flat array",
            "itemtype": "method",
            "name": "addExternalPlugins",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "an",
                    "description": "config object or an array of plugins",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "plugins the config object with the plugins separated by type",
                "type": "Object"
            },
            "class": "Loader",
            "module": "components"
        },
        {
            "file": "src/components/loader/loader.js",
            "line": 94,
            "description": "adds all the external plugins that were passed through `options.plugins`",
            "itemtype": "method",
            "name": "addExternalPlugins",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "plugins",
                    "description": "the config object with all plugins",
                    "type": "Object"
                }
            ],
            "class": "Loader",
            "module": "components"
        },
        {
            "file": "src/components/loader/loader.js",
            "line": 115,
            "description": "validate if the external plugins that were passed through `options.plugins` are associated to the correct type",
            "itemtype": "method",
            "name": "validateExternalPluginsType",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "plugins",
                    "description": "the config object with all plugins",
                    "type": "Object"
                }
            ],
            "class": "Loader",
            "module": "components"
        },
        {
            "file": "src/components/media_control/media_control.js",
            "line": 5,
            "description": "The MediaControl is responsible for displaying the Player controls.",
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/mediator.js",
            "line": 5,
            "description": "The mediator is a singleton for handling global events.",
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 51,
            "description": "Determine if the playback has ended.",
            "itemtype": "property",
            "name": "ended",
            "type": "Boolean",
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 60,
            "description": "Determine if the playback is having to buffer in order for\nplayback to be smooth.\n(i.e if a live stream is playing smoothly, this will be false)",
            "itemtype": "property",
            "name": "buffering",
            "type": "Boolean",
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 80,
            "description": "An events map that allows the user to add custom callbacks in player's options.",
            "itemtype": "property",
            "name": "eventsMapping",
            "type": "{Object}",
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 101,
            "description": "## Player's constructor\n\nYou might pass the options object to build the player.\n```javascript\nvar options = {source: \"http://example.com/video.mp4\", param1: \"val1\"};\nvar player = new Clappr.Player(options);\n```",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "options",
                    "description": "Data\noptions to build a player instance",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "\nplayer's width **default**: `640`",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height",
                            "description": "\nplayer's height **default**: `360`",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "parentId",
                            "description": "\nthe id of the element on the page that the player should be inserted into",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "\na reference to a dom element that the player should be inserted into",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "source",
                            "description": "\nThe media source URL, or {source: <<source URL>>, mimeType: <<source mime type>>}",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sources",
                            "description": "\nAn array of media source URL's, or an array of {source: <<source URL>>, mimeType: <<source mime type>>}",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "autoPlay",
                            "description": "\nautomatically play after page load **default**: `false`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "loop",
                            "description": "\nautomatically replay after it ends **default**: `false`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "chromeless",
                            "description": "\nplayer acts in chromeless mode **default**: `false`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "allowUserInteraction",
                            "description": "\nwhether or not the player should handle click events when in chromeless mode **default**: `false` on desktops browsers, `true` on mobile.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "disableKeyboardShortcuts",
                            "description": "\ndisable keyboard shortcuts. **default**: `false`. `true` if `allowUserInteraction` is `false`.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "muted",
                            "description": "\nstart the video muted **default**: `false`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "mimeType",
                            "description": "\nadd `mimeType: \"application/vnd.apple.mpegurl\"` if you need to use a url without extension.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "actualLiveTime",
                            "description": "\nshow duration and seek time relative to actual time.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "actualLiveServerTime",
                            "description": "\nspecify server time as a string, format: \"2015/11/26 06:01:03\". This option is meant to be used with actualLiveTime.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "persistConfig",
                            "description": "\npersist player's settings (volume) through the same domain **default**: `true`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "preload",
                            "description": "\nvideo will be preloaded according to `preload` attribute options **default**: `'metadata'`",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "maxBufferLength",
                            "description": "\nthe default behavior for the **HLS playback** is to keep buffering indefinitely, even on VoD.\nThis replicates the behavior for progressive download, which continues buffering when pausing the video, thus making the video available for playback even on slow networks.\nTo change this behavior use `maxBufferLength` where **value is in seconds**.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "gaAccount",
                            "description": "\nenable Google Analytics events dispatch **(play/pause/stop/buffering/etc)** by adding your `gaAccount`",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "gaTrackerName",
                            "description": "\nbesides `gaAccount` you can optionally, pass your favorite trackerName as `gaTrackerName`",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "mediacontrol",
                            "description": "\ncustomize control bar colors, example: `mediacontrol: {seekbar: \"#E113D3\", buttons: \"#66B2FF\"}`",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "hideMediaControl",
                            "description": "\ncontrol media control auto hide **default**: `true`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "hideVolumeBar",
                            "description": "\nwhen embedded with width less than 320, volume bar will hide. You can force this behavior for all sizes by adding `true` **default**: `false`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "watermark",
                            "description": "\nput `watermark: 'http://url/img.png'` on your embed parameters to automatically add watermark on your video.\nYou can customize corner position by defining position parameter. Positions can be `bottom-left`, `bottom-right`, `top-left` and `top-right`.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "watermarkLink",
                            "description": "\n`watermarkLink: 'http://example.net/'` - define URL to open when the watermark is clicked. If not provided watermark will not be clickable.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "disableVideoTagContextMenu",
                            "description": "\ndisables the context menu (right click) on the video element if a HTML5Video playback is used.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "autoSeekFromUrl",
                            "description": "\nAutomatically seek to the seconds provided in the url (e.g example.com?t=100) **default**: `true`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "exitFullscreenOnEnd",
                            "description": "\nAutomatically exit full screen when the media finishes. **default**: `true`",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "poster",
                            "description": "\ndefine a poster by adding its address `poster: 'http://url/img.png'`. It will appear after video embed, disappear on play and go back when user stops the video.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "playbackNotSupportedMessage",
                            "description": "\ndefine a custom message to be displayed when a playback is not supported.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "events",
                            "description": "\nSpecify listeners which will be registered with their corresponding player events.\nE.g. onReady -> \"PLAYER_READY\", onTimeUpdate -> \"PLAYER_TIMEUPDATE\"",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 206,
            "description": "Specify a `parentId` to the player.",
            "itemtype": "method",
            "name": "setParentId",
            "params": [
                {
                    "name": "parentId",
                    "description": "the element parent id.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 220,
            "description": "You can use this method to attach the player to a given element. You don't need to do this when you specify it during the player instantiation passing the `parentId` param.",
            "itemtype": "method",
            "name": "attachTo",
            "params": [
                {
                    "name": "element",
                    "description": "a given element.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 329,
            "description": "resizes the current player canvas.",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "size",
                    "description": "should be a literal object with `height` and `width`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "example": [
                "\n```javascript\nplayer.resize({height: 360, width: 640})\n```"
            ],
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 344,
            "description": "loads a new source.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "sources",
                    "description": "source or sources of video.\nAn array item can be a string or {source: <<source URL>>, mimeType: <<source mime type>>}",
                    "type": "Array|String"
                },
                {
                    "name": "mimeType",
                    "description": "a mime type, example: `'application/vnd.apple.mpegurl'`",
                    "type": "String"
                },
                {
                    "name": "autoPlay",
                    "description": "whether playing should be started immediately",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 361,
            "description": "destroys the current player and removes it from the DOM.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 371,
            "description": "Gives user consent to playback. Required by mobile device after a click event before Player.load().",
            "itemtype": "method",
            "name": "consent",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 381,
            "description": "plays the current video (`source`).",
            "itemtype": "method",
            "name": "play",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 391,
            "description": "pauses the current video (`source`).",
            "itemtype": "method",
            "name": "pause",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 401,
            "description": "stops the current video (`source`).",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 412,
            "description": "seeks the current video (`source`). For example, `player.seek(120)` will seek to second 120 (2minutes) of the current video.",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "time",
                    "description": "should be a number between 0 and the video duration.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 423,
            "description": "seeks the current video (`source`). For example, `player.seek(50)` will seek to the middle of the current video.",
            "itemtype": "method",
            "name": "seekPercentage",
            "params": [
                {
                    "name": "time",
                    "description": "should be a number between 0 and 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 434,
            "description": "Set the volume for the current video (`source`).",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "should be a number between 0 and 100, 0 being mute and 100 the max volume.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 447,
            "description": "Get the volume for the current video",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "volume should be a number between 0 and 100, 0 being mute and 100 the max volume.",
                "type": "Number"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 456,
            "description": "mutes the current video (`source`).",
            "itemtype": "method",
            "name": "mute",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 467,
            "description": "unmutes the current video (`source`).",
            "itemtype": "method",
            "name": "unmute",
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 478,
            "description": "checks if the player is playing.",
            "itemtype": "method",
            "name": "isPlaying",
            "return": {
                "description": "`true` if the current source is playing, otherwise `false`",
                "type": "Boolean"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 487,
            "description": "returns `true` if DVR is enable otherwise `false`.",
            "itemtype": "method",
            "name": "isDvrEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 496,
            "description": "returns `true` if DVR is in use otherwise `false`.",
            "itemtype": "method",
            "name": "isDvrInUse",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 505,
            "description": "enables to configure a player after its creation",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "options",
                    "description": "all the options to change in form of a javascript object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "itself",
                "type": "Player"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 516,
            "description": "get a plugin by its name.",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "name",
                    "description": "of the plugin.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the plugin instance",
                "type": "Object"
            },
            "example": [
                "\n```javascript\nvar poster = player.getPlugin('poster');\nposter.hidePlayButton();\n```"
            ],
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 532,
            "description": "the current time in seconds.",
            "itemtype": "method",
            "name": "getCurrentTime",
            "return": {
                "description": "current time (in seconds) of the current source",
                "type": "Number"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 541,
            "description": "The time that \"0\" now represents relative to when playback started.\nFor a stream with a sliding window this will increase as content is\nremoved from the beginning.",
            "itemtype": "method",
            "name": "getStartTimeOffset",
            "return": {
                "description": "time (in seconds) that time \"0\" represents.",
                "type": "Number"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/components/player.js",
            "line": 552,
            "description": "the duration time in seconds.",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "duration time (in seconds) of the current source",
                "type": "Number"
            },
            "class": "Player",
            "module": "components"
        },
        {
            "file": "src/playbacks/flash/flash.js",
            "line": 22,
            "description": "Determine if the playback has ended.",
            "itemtype": "property",
            "name": "ended",
            "type": "Boolean",
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/playbacks/flash/flash.js",
            "line": 31,
            "description": "Determine if the playback is buffering.\nThis is related to the PLAYBACK_BUFFERING and PLAYBACK_BUFFERFULL events",
            "itemtype": "property",
            "name": "buffering",
            "type": "Boolean",
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/playbacks/flashls/flashls.js",
            "line": 37,
            "description": "Determine if the playback has ended.",
            "itemtype": "property",
            "name": "ended",
            "type": "Boolean",
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/playbacks/flashls/flashls.js",
            "line": 46,
            "description": "Determine if the playback is buffering.\nThis is related to the PLAYBACK_BUFFERING and PLAYBACK_BUFFERFULL events",
            "itemtype": "property",
            "name": "buffering",
            "type": "Boolean",
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/playbacks/html5_video/html5_video.js",
            "line": 72,
            "description": "Determine if the playback has ended.",
            "itemtype": "property",
            "name": "ended",
            "type": "Boolean",
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/playbacks/html5_video/html5_video.js",
            "line": 81,
            "description": "Determine if the playback is having to buffer in order for\nplayback to be smooth.\nThis is related to the PLAYBACK_BUFFERING and PLAYBACK_BUFFERFULL events",
            "itemtype": "property",
            "name": "buffering",
            "type": "Boolean",
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/playbacks/html5_video/html5_video.js",
            "line": 136,
            "description": "Sets the source url on the <video> element, and also the 'src' property.",
            "itemtype": "method",
            "name": "setupSrc",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "srcUrl",
                    "description": "The source URL.",
                    "type": "String"
                }
            ],
            "class": "Strings",
            "module": "components"
        },
        {
            "file": "src/plugins/strings.js",
            "line": 19,
            "description": "Gets a translated string for the given key.",
            "itemtype": "method",
            "name": "t",
            "params": [
                {
                    "name": "key",
                    "description": "the key to all messages",
                    "type": "String"
                }
            ],
            "return": {
                "description": "translated label",
                "type": "String"
            },
            "class": "Strings",
            "module": "plugins"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nContainer is responsible for the video rendering and state",
            "line": " src/components/container/container.js:5"
        },
        {
            "message": "Missing item type\nThe ContainerFactory is responsible for manage playback bootstrap and create containers.",
            "line": " src/components/container_factory/container_factory.js:5"
        },
        {
            "message": "Missing item type\nThe MediaControl is responsible for displaying the Player controls.",
            "line": " src/components/media_control/media_control.js:5"
        },
        {
            "message": "Missing item type\nThe mediator is a singleton for handling global events.",
            "line": " src/components/mediator.js:5"
        }
    ]
}